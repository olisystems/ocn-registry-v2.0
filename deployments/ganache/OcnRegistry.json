{
  "address": "0x8859aDdef2d86aE6c0d0Dd73a60cD099E770c8d6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_paymentManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "domain",
          "type": "string"
        }
      ],
      "name": "OperatorUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes2",
          "name": "countryCode",
          "type": "bytes2"
        },
        {
          "indexed": false,
          "internalType": "bytes3",
          "name": "partyId",
          "type": "bytes3"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "partyAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum OcnRegistry.Role[]",
          "name": "roles",
          "type": "uint8[]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operatorAddress",
          "type": "address"
        }
      ],
      "name": "PartyUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "adminDeleteOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes2",
          "name": "countryCode",
          "type": "bytes2"
        },
        {
          "internalType": "bytes3",
          "name": "partyId",
          "type": "bytes3"
        }
      ],
      "name": "adminDeleteParty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deleteNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "deleteNodeRaw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deleteParty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "deletePartyRaw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "getNode",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNodeOperators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party",
          "type": "address"
        }
      ],
      "name": "getOperatorByAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "domain",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes2",
          "name": "countryCode",
          "type": "bytes2"
        },
        {
          "internalType": "bytes3",
          "name": "partyId",
          "type": "bytes3"
        }
      ],
      "name": "getOperatorByOcpi",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "domain",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParties",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "partyAddress",
          "type": "address"
        }
      ],
      "name": "getPartyDetailsByAddress",
      "outputs": [
        {
          "internalType": "bytes2",
          "name": "countryCode",
          "type": "bytes2"
        },
        {
          "internalType": "bytes3",
          "name": "partyId",
          "type": "bytes3"
        },
        {
          "internalType": "enum OcnRegistry.Role[]",
          "name": "roles",
          "type": "uint8[]"
        },
        {
          "internalType": "address",
          "name": "operatorAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "operatorDomain",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes2",
          "name": "countryCode",
          "type": "bytes2"
        },
        {
          "internalType": "bytes3",
          "name": "partyId",
          "type": "bytes3"
        }
      ],
      "name": "getPartyDetailsByOcpi",
      "outputs": [
        {
          "internalType": "address",
          "name": "partyAddress",
          "type": "address"
        },
        {
          "internalType": "enum OcnRegistry.Role[]",
          "name": "roles",
          "type": "uint8[]"
        },
        {
          "internalType": "address",
          "name": "operatorAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "operatorDomain",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentManager",
      "outputs": [
        {
          "internalType": "contract IOcnPaymentManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "domain",
          "type": "string"
        }
      ],
      "name": "setNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "domain",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "setNodeRaw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes2",
          "name": "countryCode",
          "type": "bytes2"
        },
        {
          "internalType": "bytes3",
          "name": "partyId",
          "type": "bytes3"
        },
        {
          "internalType": "enum OcnRegistry.Role[]",
          "name": "roles",
          "type": "uint8[]"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "setParty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party",
          "type": "address"
        },
        {
          "internalType": "bytes2",
          "name": "countryCode",
          "type": "bytes2"
        },
        {
          "internalType": "bytes3",
          "name": "partyId",
          "type": "bytes3"
        },
        {
          "internalType": "enum OcnRegistry.Role[]",
          "name": "roles",
          "type": "uint8[]"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "setPartyRaw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party",
          "type": "address"
        }
      ],
      "name": "updatePaymentStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7d1014eafa8c4e5747ab1c867dc9c3b6813efd945eec914c86cc93cff2f4873e",
  "receipt": {
    "to": null,
    "from": "0xdD3D370a673cfdCfB0c4cA2a3fE313e1559d1fdc",
    "contractAddress": "0x8859aDdef2d86aE6c0d0Dd73a60cD099E770c8d6",
    "transactionIndex": 0,
    "gasUsed": "2722155",
    "logsBloom": "0x
    "blockHash": "0xb30185b54c06472b0106b61af38fa5ba74f47d57d87e4d8845cc7e17b955bfdd",
    "transactionHash": "0x7d1014eafa8c4e5747ab1c867dc9c3b6813efd945eec914c86cc93cff2f4873e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1037,
        "transactionHash": "0x7d1014eafa8c4e5747ab1c867dc9c3b6813efd945eec914c86cc93cff2f4873e",
        "address": "0x8859aDdef2d86aE6c0d0Dd73a60cD099E770c8d6",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dd3d370a673cfdcfb0c4ca2a3fe313e1559d1fdc",
          "0x000000000000000000000000dd3d370a673cfdcfb0c4ca2a3fe313e1559d1fdc"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb30185b54c06472b0106b61af38fa5ba74f47d57d87e4d8845cc7e17b955bfdd"
      }
    ],
    "blockNumber": 1037,
    "cumulativeGasUsed": "2722155",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x49277299920B077E20ced0287Ee1c8775e49Db1e"
  ],
  "numDeployments": 1,
  "solcInputHash": "33e1e0c64ad6312ee0f2affbec3ec2b2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"}],\"name\":\"OperatorUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes2\",\"name\":\"countryCode\",\"type\":\"bytes2\"},{\"indexed\":false,\"internalType\":\"bytes3\",\"name\":\"partyId\",\"type\":\"bytes3\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum OcnRegistry.Role[]\",\"name\":\"roles\",\"type\":\"uint8[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"}],\"name\":\"PartyUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"adminDeleteOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes2\",\"name\":\"countryCode\",\"type\":\"bytes2\"},{\"internalType\":\"bytes3\",\"name\":\"partyId\",\"type\":\"bytes3\"}],\"name\":\"adminDeleteParty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"deleteNodeRaw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteParty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"deletePartyRaw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getNode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodeOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"}],\"name\":\"getOperatorByAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes2\",\"name\":\"countryCode\",\"type\":\"bytes2\"},{\"internalType\":\"bytes3\",\"name\":\"partyId\",\"type\":\"bytes3\"}],\"name\":\"getOperatorByOcpi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParties\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partyAddress\",\"type\":\"address\"}],\"name\":\"getPartyDetailsByAddress\",\"outputs\":[{\"internalType\":\"bytes2\",\"name\":\"countryCode\",\"type\":\"bytes2\"},{\"internalType\":\"bytes3\",\"name\":\"partyId\",\"type\":\"bytes3\"},{\"internalType\":\"enum OcnRegistry.Role[]\",\"name\":\"roles\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"operatorDomain\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes2\",\"name\":\"countryCode\",\"type\":\"bytes2\"},{\"internalType\":\"bytes3\",\"name\":\"partyId\",\"type\":\"bytes3\"}],\"name\":\"getPartyDetailsByOcpi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"partyAddress\",\"type\":\"address\"},{\"internalType\":\"enum OcnRegistry.Role[]\",\"name\":\"roles\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"operatorDomain\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentManager\",\"outputs\":[{\"internalType\":\"contract IOcnPaymentManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"}],\"name\":\"setNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"setNodeRaw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes2\",\"name\":\"countryCode\",\"type\":\"bytes2\"},{\"internalType\":\"bytes3\",\"name\":\"partyId\",\"type\":\"bytes3\"},{\"internalType\":\"enum OcnRegistry.Role[]\",\"name\":\"roles\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"setParty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"},{\"internalType\":\"bytes2\",\"name\":\"countryCode\",\"type\":\"bytes2\"},{\"internalType\":\"bytes3\",\"name\":\"partyId\",\"type\":\"bytes3\"},{\"internalType\":\"enum OcnRegistry.Role[]\",\"name\":\"roles\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"setPartyRaw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"}],\"name\":\"updatePaymentStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"nodeOf\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"transferOwnership(address)\":{\"notice\":\"Called when Base Contract upgrades: iterate version   \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OcnRegistry.sol\":\"OcnRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/IOcnPaymentManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IOcnPaymentManager {\\n    /* ********************************** */\\n    /*               ENUMS                */\\n    /* ********************************** */\\n\\n    enum PaymentStatus { PENDING, PAYMENT_UP_TO_DATE, INSUFFICIENT_FUNDS, INACTIVE }\\n\\n    /* ********************************** */\\n    /*               EVENTS               */\\n    /* ********************************** */\\n\\n    event PaymentMade(address indexed operator, uint256 amount);\\n    event Withdrawal(address indexed party, uint256 amount);\\n\\n    /* ********************************** */\\n    /*            FUNCTIONS               */\\n    /* ********************************** */\\n\\n    /**\\n     * @notice Initializes the contract with the given Euro stablecoin address.\\n     * @param _euroStablecoin The address of the ERC20 Euro stablecoin contract.\\n     */\\n     // TODO uncoment for upgradebles\\n    // function initialize(address _euroStablecoin) external;\\n\\n    /**\\n     * @notice Allows an operator to make a payment.\\n     */\\n    function pay() external;\\n\\n    /**\\n     * @notice Allows an operator to withdraw their staked funds gradually.\\n     */\\n    function withdraw() external;\\n\\n    /**\\n     * @notice Returns the payment status of a given operator.\\n     * @param operator The address of the operator to check.\\n     * @return The payment status of the operator.\\n     */\\n    function getPaymentStatus(address operator) external view returns (PaymentStatus);\\n\\n    \\n    /* ********************************** */\\n    /*       STORAGE VARIABLES            */\\n    /* ********************************** */\\n\\n    function euroStablecoin() external view returns (IERC20);\\n    function stakedFunds(address operator) external view returns (uint256);\\n    function lastPaymentTime(address operator) external view returns (uint256);\\n    // TODO uncoment for upgradebles\\n    // function getCurrentBaseContract() external view returns (address);\\n    // function version() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x997e5a215470be7fc8415394805a7afe24fd98b656ce5d3ca73e6b8a192098bf\",\"license\":\"GPL-3.0\"},\"contracts/OcnRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IOcnPaymentManager.sol\\\";\\n\\n\\n// TODO uncoment to transform in upgradebles\\n// import \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n// import \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n// import \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n// TODO remove to transrom in upgradeble\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n\\n// TODO uncoment to transform in upgradebles\\n//contract OcnRegistry is Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n\\n// TODO remove to transform in upgradeble\\ncontract OcnRegistry is AccessControl { \\n   \\n    /* ********************************** */\\n    /*       STORAGE VARIABLES            */\\n    /* ********************************** */\\n\\n    //storage reserve for future variables\\n     // TODO uncoment to transform in upgradebles\\n    // uint256[50] __gap;\\n    // bytes32 public UPGRADER_ROLE;\\n    // uint public version;\\n    // address currentBaseContract;\\n    string private prefix;\\n\\n   \\n\\n    /// TODO uncoment for upgradebles\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    // constructor() {\\n    //     _disableInitializers();\\n    // }\\n\\n\\n    // OCN Node Operator Listings\\n    mapping(address => string) private nodeOf;\\n    mapping(string => bool) private uniqueDomains;\\n    mapping(address => bool) private uniqueOperators;\\n    address[] private operators;\\n\\n    // OCPI Party Listings\\n    enum Role { CPO, EMSP, HUB, NAP, NSP, OTHER, SCSP }\\n    enum Module { cdrs, chargingprofiles, commands, locations, sessions, tariffs, tokens }\\n\\n\\n    enum VcStatus { NOT_VERIFIED, APPROVED, FAILED }\\n\\n    struct PartyDetails {\\n        bytes2 countryCode;\\n        bytes3 partyId;\\n        Role[] roles;\\n        string name;\\n        string url;\\n        IOcnPaymentManager.PaymentStatus paymentStatus;\\n        VcStatus vcStatus;\\n        bool active;\\n    }\\n\\n    mapping(bytes2 => mapping(bytes3 => address)) private uniqueParties;\\n    mapping(address => bool) private uniquePartyAddresses;\\n    mapping(address => PartyDetails) private partyOf;\\n    mapping(address => address) private operatorOf;\\n    address[] private parties;\\n\\n    IOcnPaymentManager public paymentManager;\\n\\n    /* ********************************** */\\n    /*               EVENTS               */\\n    /* ********************************** */\\n\\n    event OperatorUpdate(address indexed operator, string domain);\\n    event PartyUpdate(\\n        bytes2 countryCode,\\n        bytes3 partyId,\\n        address indexed partyAddress,\\n        Role[] roles,\\n        address indexed operatorAddress\\n    );\\n\\n    /* ********************************** */\\n    /*          INITIALIZER               */\\n    /* ********************************** */\\n    // used as constructor in upgradeble contracts\\n    // TOEO uncoment for upgradebles\\n    // function initialize(address _paymentManager) public initializer {\\n    //     prefix = \\\"\\\\u0019Ethereum Signed Message:\\\\n32\\\";\\n    //     paymentManager = IOcnPaymentManager(_paymentManager);\\n    //     UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n\\n    //     __AccessControl_init();\\n    //     __UUPSUpgradeable_init();\\n\\n    //     _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    //     _grantRole(UPGRADER_ROLE, msg.sender);\\n    // }\\n\\n     // TODO remove for upgradebles\\n    constructor (address _paymentManager){\\n        prefix = \\\"\\\\u0019Ethereum Signed Message:\\\\n32\\\";\\n        paymentManager = IOcnPaymentManager(_paymentManager);\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n    \\n    /**\\n     * Called when Base Contract upgrades: iterate version   \\n     */\\n     // TODO uncoment for upgradebles\\n    // function _authorizeUpgrade(address newImplementation)\\n    //     internal\\n    //     onlyRole(UPGRADER_ROLE)\\n    //     override\\n    // {\\n    //     currentBaseContract = newImplementation;\\n    //     version++;\\n    // }\\n\\n    /* ********************************** */\\n    /*            FUNCTIONS               */\\n    /* ********************************** */\\n\\n    // To be used on deploy to transfer ownership from the deployer address to the Timelock Contract address\\n    function transferOwnership(address newOwner) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        // Grant DEFAULT_ADMIN_ROLE to new owner\\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        // Revoke DEFAULT_ADMIN_ROLE from current owner\\n        revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n\\n    function adminDeleteOperator(address operator) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        deleteNode(operator);\\n    }\\n\\n    function adminDeleteParty(bytes2 countryCode, bytes3 partyId) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        address party = uniqueParties[countryCode][partyId];\\n        deleteParty(party);\\n    }\\n\\n    function setNode(address operator, string memory domain) private {\\n        require(bytes(domain).length != 0, \\\"Cannot set empty domain name. Use deleteNode method instead.\\\");\\n        require(uniqueDomains[domain] == false, \\\"Domain name already registered.\\\");\\n        uniqueDomains[domain] = true;\\n\\n        if (uniqueOperators[operator] == false) {\\n            operators.push(operator);\\n        }\\n\\n        uniqueOperators[operator] = true;\\n        nodeOf[operator] = domain;\\n        emit OperatorUpdate(operator, domain);\\n    }\\n\\n    function setNode(string memory domain) public {\\n        setNode(msg.sender, domain);\\n    }\\n\\n    function setNodeRaw(address operator, string memory domain, uint8 v, bytes32 r, bytes32 s) public {\\n        bytes32 paramHash = keccak256(abi.encodePacked(operator, domain));\\n        address signer = ecrecover(keccak256(abi.encodePacked(prefix, paramHash)), v, r, s);\\n        setNode(signer, domain);\\n    }\\n\\n    function deleteNode(address operator) private {\\n        string memory domain = nodeOf[operator];\\n        require(bytes(domain).length > 0, \\\"Cannot delete node that does not exist.\\\");\\n        uniqueDomains[domain] = false;\\n        delete nodeOf[operator];\\n        emit OperatorUpdate(operator, \\\"\\\");\\n    }\\n\\n    function deleteNode() public {\\n        deleteNode(msg.sender);\\n    }\\n\\n    function deleteNodeRaw(address operator, uint8 v, bytes32 r, bytes32 s) public {\\n        bytes32 paramHash = keccak256(abi.encodePacked(operator));\\n        address signer = ecrecover(keccak256(abi.encodePacked(prefix, paramHash)), v, r, s);\\n        deleteNode(signer);\\n    }\\n\\n    function getNode(address operator) public view returns (string memory) {\\n        return nodeOf[operator];\\n    }\\n\\n    function getNodeOperators() public view returns (address[] memory) {\\n        return operators;\\n    }\\n\\n    function setParty(\\n        address party,\\n        bytes2 countryCode,\\n        bytes3 partyId,\\n        Role[] memory roles,\\n        address operator,\\n        string memory name,\\n        string memory url\\n    ) private {\\n        require(countryCode != bytes2(0), \\\"Cannot set empty country_code. Use deleteParty method instead.\\\");\\n        require(partyId != bytes3(0), \\\"Cannot set empty party_id. Use deleteParty method instead.\\\");\\n        require(roles.length > 0, \\\"No roles provided.\\\");\\n        require(operator != address(0), \\\"Cannot set empty operator. Use deleteParty method instead.\\\");\\n\\n        address registeredParty = uniqueParties[countryCode][partyId];\\n        require(\\n            registeredParty == address(0) || registeredParty == party,\\n            \\\"Party with country_code/party_id already registered under different address.\\\"\\n        );\\n        uniqueParties[countryCode][partyId] = party;\\n\\n        require(bytes(nodeOf[operator]).length != 0, \\\"Provided operator not registered.\\\");\\n\\n        if (uniquePartyAddresses[party] == false) {\\n            parties.push(party);\\n        }\\n\\n        uniquePartyAddresses[party] = true;\\n\\n        IOcnPaymentManager.PaymentStatus paymentStatus = paymentManager.getPaymentStatus(party);\\n\\n        partyOf[party] = PartyDetails(countryCode, partyId, roles, name, url, paymentStatus, VcStatus.NOT_VERIFIED, true);\\n        operatorOf[party] = operator;\\n\\n        emit PartyUpdate(countryCode, partyId, party, roles, operator);\\n    }\\n\\n    function setParty(\\n        bytes2 countryCode,\\n        bytes3 partyId,\\n        Role[] memory roles,\\n        address operator,\\n        string memory name,\\n        string memory url\\n    ) public {\\n        setParty(msg.sender, countryCode, partyId, roles, operator, name, url);\\n    }\\n\\n    function setPartyRaw(\\n        address party,\\n        bytes2 countryCode,\\n        bytes3 partyId,\\n        Role[] memory roles,\\n        address operator,\\n        string memory name, \\n        string memory url,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        bytes32 paramHash = keccak256(abi.encodePacked(party, countryCode, partyId, roles, operator));\\n        address signer = ecrecover(keccak256(abi.encodePacked(prefix, paramHash)), v, r, s);\\n        require(signer == party, \\\"Signer and provided party address different.\\\");\\n        setParty(signer, countryCode, partyId, roles, operator, name, url);\\n    }\\n\\n    function deleteParty(address party) private {\\n        require(operatorOf[party] != address(0), \\\"Cannot delete party that does not exist. No operator found for given party.\\\");\\n        delete operatorOf[party];\\n        PartyDetails memory details = partyOf[party];\\n        delete uniqueParties[details.countryCode][details.partyId];\\n        delete partyOf[party];\\n\\n        Role[] memory emptyRoles;\\n        emit PartyUpdate(details.countryCode, details.partyId, party, emptyRoles, address(0));\\n    }\\n\\n    function deleteParty() public {\\n        deleteParty(msg.sender);\\n    }\\n\\n    function deletePartyRaw(\\n        address party,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        bytes32 paramHash = keccak256(abi.encodePacked(party));\\n        address signer = ecrecover(keccak256(abi.encodePacked(prefix, paramHash)), v, r, s);\\n        require(signer == party, \\\"Signer and provided party address different.\\\");\\n        deleteParty(signer);\\n    }\\n\\n    function getOperatorByAddress(address party) public view returns (address operator, string memory domain) {\\n        operator = operatorOf[party];\\n        domain = nodeOf[operator];\\n    }\\n\\n    function getOperatorByOcpi(bytes2 countryCode, bytes3 partyId) public view returns (address operator, string memory domain) {\\n        address party = uniqueParties[countryCode][partyId];\\n        operator = operatorOf[party];\\n        domain = nodeOf[operator];\\n    }\\n\\n    function getPartyDetailsByAddress(address partyAddress) public view returns (\\n        bytes2 countryCode,\\n        bytes3 partyId,\\n        Role[] memory roles,\\n        address operatorAddress,\\n        string memory operatorDomain\\n    ) {\\n        PartyDetails memory details = partyOf[partyAddress];\\n        countryCode = details.countryCode;\\n        partyId = details.partyId;\\n        roles = details.roles;\\n        operatorAddress = operatorOf[partyAddress];\\n        operatorDomain = nodeOf[operatorAddress];\\n    }\\n\\n    function getPartyDetailsByOcpi(bytes2 countryCode, bytes3 partyId) public view returns (\\n        address partyAddress,\\n        Role[] memory roles,\\n        address operatorAddress,\\n        string memory operatorDomain\\n    ) {\\n        partyAddress = uniqueParties[countryCode][partyId];\\n        PartyDetails memory details = partyOf[partyAddress];\\n        roles = details.roles;\\n        operatorAddress = operatorOf[partyAddress];\\n        operatorDomain = nodeOf[operatorAddress];\\n    }\\n\\n    function getParties() public view returns (address[] memory) {\\n        return parties;\\n    }\\n\\n    function updatePaymentStatus(address party) external {\\n        require(msg.sender == address(paymentManager), \\\"Unauthorized: only OcnPaymentManager can update payment status\\\");\\n        IOcnPaymentManager.PaymentStatus paymentStatus = paymentManager.getPaymentStatus(party);\\n        partyOf[party].paymentStatus = paymentStatus;\\n    }\\n}\",\"keccak256\":\"0x43281b40c9616730cdb3f6eaf1a3c0ae1af3abcef2c0e96966595388c8db2ed2\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "stateVariables": {
      "nodeOf": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "transferOwnership(address)": {
        "notice": "Called when Base Contract upgrades: iterate version   "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/OcnRegistry.sol:OcnRegistry",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 802,
        "contract": "contracts/OcnRegistry.sol:OcnRegistry",
        "label": "prefix",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 807,
        "contract": "contracts/OcnRegistry.sol:OcnRegistry",
        "label": "nodeOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 811,
        "contract": "contracts/OcnRegistry.sol:OcnRegistry",
        "label": "uniqueDomains",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 815,
        "contract": "contracts/OcnRegistry.sol:OcnRegistry",
        "label": "uniqueOperators",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 818,
        "contract": "contracts/OcnRegistry.sol:OcnRegistry",
        "label": "operators",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 865,
        "contract": "contracts/OcnRegistry.sol:OcnRegistry",
        "label": "uniqueParties",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes2,t_mapping(t_bytes3,t_address))"
      },
      {
        "astId": 869,
        "contract": "contracts/OcnRegistry.sol:OcnRegistry",
        "label": "uniquePartyAddresses",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 874,
        "contract": "contracts/OcnRegistry.sol:OcnRegistry",
        "label": "partyOf",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(PartyDetails)859_storage)"
      },
      {
        "astId": 878,
        "contract": "contracts/OcnRegistry.sol:OcnRegistry",
        "label": "operatorOf",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 881,
        "contract": "contracts/OcnRegistry.sol:OcnRegistry",
        "label": "parties",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 884,
        "contract": "contracts/OcnRegistry.sol:OcnRegistry",
        "label": "paymentManager",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IOcnPaymentManager)580"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_enum(Role)826)dyn_storage": {
        "base": "t_enum(Role)826",
        "encoding": "dynamic_array",
        "label": "enum OcnRegistry.Role[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes2": {
        "encoding": "inplace",
        "label": "bytes2",
        "numberOfBytes": "2"
      },
      "t_bytes3": {
        "encoding": "inplace",
        "label": "bytes3",
        "numberOfBytes": "3"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IOcnPaymentManager)580": {
        "encoding": "inplace",
        "label": "contract IOcnPaymentManager",
        "numberOfBytes": "20"
      },
      "t_enum(PaymentStatus)530": {
        "encoding": "inplace",
        "label": "enum IOcnPaymentManager.PaymentStatus",
        "numberOfBytes": "1"
      },
      "t_enum(Role)826": {
        "encoding": "inplace",
        "label": "enum OcnRegistry.Role",
        "numberOfBytes": "1"
      },
      "t_enum(VcStatus)838": {
        "encoding": "inplace",
        "label": "enum OcnRegistry.VcStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_struct(PartyDetails)859_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct OcnRegistry.PartyDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(PartyDetails)859_storage"
      },
      "t_mapping(t_bytes2,t_mapping(t_bytes3,t_address))": {
        "encoding": "mapping",
        "key": "t_bytes2",
        "label": "mapping(bytes2 => mapping(bytes3 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes3,t_address)"
      },
      "t_mapping(t_bytes3,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes3",
        "label": "mapping(bytes3 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PartyDetails)859_storage": {
        "encoding": "inplace",
        "label": "struct OcnRegistry.PartyDetails",
        "members": [
          {
            "astId": 840,
            "contract": "contracts/OcnRegistry.sol:OcnRegistry",
            "label": "countryCode",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes2"
          },
          {
            "astId": 842,
            "contract": "contracts/OcnRegistry.sol:OcnRegistry",
            "label": "partyId",
            "offset": 2,
            "slot": "0",
            "type": "t_bytes3"
          },
          {
            "astId": 846,
            "contract": "contracts/OcnRegistry.sol:OcnRegistry",
            "label": "roles",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_enum(Role)826)dyn_storage"
          },
          {
            "astId": 848,
            "contract": "contracts/OcnRegistry.sol:OcnRegistry",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 850,
            "contract": "contracts/OcnRegistry.sol:OcnRegistry",
            "label": "url",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 853,
            "contract": "contracts/OcnRegistry.sol:OcnRegistry",
            "label": "paymentStatus",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(PaymentStatus)530"
          },
          {
            "astId": 856,
            "contract": "contracts/OcnRegistry.sol:OcnRegistry",
            "label": "vcStatus",
            "offset": 1,
            "slot": "4",
            "type": "t_enum(VcStatus)838"
          },
          {
            "astId": 858,
            "contract": "contracts/OcnRegistry.sol:OcnRegistry",
            "label": "active",
            "offset": 2,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/OcnRegistry.sol:OcnRegistry",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/OcnRegistry.sol:OcnRegistry",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}